@model IEnumerable<Vidly1.Models.Customer>
@*
    Note: I've set the model for this view to IEnumerable<Customer>.
    This is a simple interface implemented by the list class. Since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows use to
    iterate over the list. If in the future, we replace the List with a
    different data structure, as long as it is enumerable, our view code
    will remain unchanged.
*@
@{
    ViewBag.Title = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2>Customers</h2>
@if (!Model.Any())
{
    <p>We don't have any customers yet.</p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Customer</th>
                @*<th>Discount Rate</th>    30*@
                <th>Membership Type</th> @*ex3.1*@
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Model)
            {
            <tr>
                @*<td>@Html.ActionLink(customer.Name, "Details", "Customers", new { id = customer.Id }, null)</td>  delete it in ex3.1*@
                @* 30 <td>@customer.MembershipType.DiscountRate</td>   this is called eager loading
        to solve this go to controller*@
                @*Entity framework only loads the customer objects not their related objects.
        So membershipType is null.
        And that's why we have a null reference exception when we run the app.
        Now to solve this problem we need to load the customers and their membership types together.
                    <td>@customer.MembershipType.DiscountRate%</td>*@
                <td>@Html.ActionLink(customer.Name, "Edit", "Customers", new { id = customer.Id }, null)</td>
                <td>@customer.MembershipType.Name</td>
            </tr>
            }
        </tbody>
    </table>
}
